/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Mon Mar 31 14:40:44 2025.
 */

#ifndef CAN_WHEELCHAIR_H
#define CAN_WHEELCHAIR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_FRAME_ID (0x100u)
#define CAN_WHEELCHAIR_ID_110_DIAG_FRAME_ID (0x110u)
#define CAN_WHEELCHAIR_ID_111_DIAG_FRAME_ID (0x111u)

/* Frame lengths in bytes. */
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_LENGTH (8u)
#define CAN_WHEELCHAIR_ID_110_DIAG_LENGTH (8u)
#define CAN_WHEELCHAIR_ID_111_DIAG_LENGTH (8u)

/* Extended or standard frame types. */
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_IS_EXTENDED (0)
#define CAN_WHEELCHAIR_ID_110_DIAG_IS_EXTENDED (0)
#define CAN_WHEELCHAIR_ID_111_DIAG_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_CYCLE_TIME_MS (2u)
#define CAN_WHEELCHAIR_ID_110_DIAG_CYCLE_TIME_MS (2u)
#define CAN_WHEELCHAIR_ID_111_DIAG_CYCLE_TIME_MS (2u)

/* Signal choices. */


/* Frame Names. */
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_NAME "id_100_Consigne"
#define CAN_WHEELCHAIR_ID_110_DIAG_NAME "id_110_Diag"
#define CAN_WHEELCHAIR_ID_111_DIAG_NAME "id_111_Diag"

/* Signal Names. */
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_CONS_CAN_AXE_X_NAME "Cons_CAN_axe_X"
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_CONS_CAN_AXE_Y_NAME "Cons_CAN_axe_Y"
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_ACTIVATION_CONS_CAN_AXE_Y_NAME "Activation_Cons_CAN_axe_Y"
#define CAN_WHEELCHAIR_ID_100_CONSIGNE_ACTIVATION_CONS_CAN_AXE_X_NAME "Activation_Cons_CAN_axe_X"
#define CAN_WHEELCHAIR_ID_110_DIAG_POSITION_JOYSTICK_Y_NAME "Position_joystick_Y"
#define CAN_WHEELCHAIR_ID_110_DIAG_POSITION_JOYSTICK_X_NAME "Position_joystick_X"
#define CAN_WHEELCHAIR_ID_110_DIAG_ID100_TRAME_VALIDE_NAME "id100_trame_valide"
#define CAN_WHEELCHAIR_ID_110_DIAG_CONS_X_ROBOT_NAME "Cons_X_Robot"
#define CAN_WHEELCHAIR_ID_110_DIAG_CONS_Y_ROBOT_NAME "Cons_Y_Robot"
#define CAN_WHEELCHAIR_ID_110_DIAG_MESURE_TENSION_24_V_NAME "Mesure_tension_24V"
#define CAN_WHEELCHAIR_ID_110_DIAG_MESURE_TENSION_12_V_NAME "Mesure_tension_12V"
#define CAN_WHEELCHAIR_ID_110_DIAG_MESURE_TENSION_19_V_NAME "Mesure_tension_19V"
#define CAN_WHEELCHAIR_ID_110_DIAG_DESACTIVATION_ROBOT_TIMEOUT_CAN_NAME "Desactivation_robot_timeout_CAN"
#define CAN_WHEELCHAIR_ID_111_DIAG_VITESSE_ROUE_GAUCHE_NAME "Vitesse_roue_gauche"
#define CAN_WHEELCHAIR_ID_111_DIAG_VITESSE_ROUE_DROITE_NAME "Vitesse_roue_droite"
#define CAN_WHEELCHAIR_ID_111_DIAG_DIRECTION_ROUE_DROITE_NAME "Direction_roue_droite"
#define CAN_WHEELCHAIR_ID_111_DIAG_DIRECTION_ROUE_GAUCHE_NAME "Direction_roue_gauche"
#define CAN_WHEELCHAIR_ID_111_DIAG_DFT_MAXI_CAPTEUR_JOYSTICK_AXE_Y_NAME "Dft_maxi_capteur_joystick_axe_Y"
#define CAN_WHEELCHAIR_ID_111_DIAG_DFT_MINI_CAPTEUR_JOYSTICK_AXE_Y_NAME "Dft_mini_capteur_joystick_axe_Y"
#define CAN_WHEELCHAIR_ID_111_DIAG_DFT_MAXI_CAPTEUR_JOYSTICK_AXE_X_NAME "Dft_maxi_capteur_joystick_axe_X"
#define CAN_WHEELCHAIR_ID_111_DIAG_DFT_MINI_CAPTEUR_JOYSTICK_AXE_X_NAME "Dft_mini_capteur_joystick_axe_X"

/**
 * Signals in message id_100_Consigne.
 *
 * PC Robotisation vers boitier FH
 *
 * All signal values are as on the CAN bus.
 */
struct can_wheelchair_id_100_consigne_t {
    /**
     * 100% marche avant, -100% marche arrière
     *
     * Range: 0..255 (-100..155 %)
     * Scale: 1
     * Offset: -100
     */
    uint8_t cons_can_axe_x;

    /**
     * 100% gauche, -100% droite
     *
     * Range: 0..255 (-100..155 %)
     * Scale: 1
     * Offset: -100
     */
    uint8_t cons_can_axe_y;

    /**
     * Active la commande du fauteuil par CAN sur l'axe Y
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t activation_cons_can_axe_y;

    /**
     * Active la commande du fauteuil par CAN sur l'axe X
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t activation_cons_can_axe_x;
};

/**
 * Signals in message id_110_Diag.
 *
 * De boitier FH
 *
 * All signal values are as on the CAN bus.
 */
struct can_wheelchair_id_110_diag_t {
    /**
     * Mesure de la position Y du joystick en mV
     *
     * Range: 0..4095 (0..4095 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t position_joystick_y;

    /**
     * Mesure de la position X du joystick en mV
     *
     * Range: 0..4095 (0..4095 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t position_joystick_x;

    /**
     * Réception trame CAN valide si = 1 (timeout=50ms)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id100_trame_valide;

    /**
     * Mode robot sur axe X activé (Activation_Cons_CAN_axe_X=1 & id100_trame_valide=1)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cons_x_robot;

    /**
     * Mode robot sur axe Y activé (Activation_Cons_CAN_axe_Y=1 & id100_trame_valide=1)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cons_y_robot;

    /**
     * Mesure de la tension de la batterie fauteuil
     *
     * Range: 0..4095 (0..40.95 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t mesure_tension_24_v;

    /**
     * Mesure de la tension de sortie du DCDC 24V/12V
     *
     * Range: 0..4095 (0..40.95 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t mesure_tension_12_v;

    /**
     * Mesure de la tension de sortie du DCDC 24V/19V
     *
     * Range: 0..4095 (0..40.95 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t mesure_tension_19_v;

    /**
     * Mode robot désactivé sur timeout id100 (reactivation nécessaire via les booléens Activation_Cons_CAN_axe_X & Y)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t desactivation_robot_timeout_can;
};

/**
 * Signals in message id_111_Diag.
 *
 * De boitier FH
 *
 * All signal values are as on the CAN bus.
 */
struct can_wheelchair_id_111_diag_t {
    /**
     * Range: 0..65535 (0..6553.5 tr/min)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vitesse_roue_gauche;

    /**
     * Range: 0..65535 (0..6553.5 tr/min)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vitesse_roue_droite;

    /**
     * 1=marche avant  0=marche arrière
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_roue_droite;

    /**
     * 1=marche avant  0=marche arrière
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_roue_gauche;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dft_maxi_capteur_joystick_axe_y;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dft_mini_capteur_joystick_axe_y;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dft_maxi_capteur_joystick_axe_x;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dft_mini_capteur_joystick_axe_x;
};

/**
 * Pack message id_100_Consigne.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_wheelchair_id_100_consigne_pack(
    uint8_t *dst_p,
    const struct can_wheelchair_id_100_consigne_t *src_p,
    size_t size);

/**
 * Unpack message id_100_Consigne.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_wheelchair_id_100_consigne_unpack(
    struct can_wheelchair_id_100_consigne_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from id_100_Consigne.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can_wheelchair_id_100_consigne_init(struct can_wheelchair_id_100_consigne_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_100_consigne_cons_can_axe_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_100_consigne_cons_can_axe_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_100_consigne_cons_can_axe_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_100_consigne_cons_can_axe_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_100_consigne_cons_can_axe_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_100_consigne_cons_can_axe_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_100_consigne_activation_cons_can_axe_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_100_consigne_activation_cons_can_axe_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_100_consigne_activation_cons_can_axe_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_100_consigne_activation_cons_can_axe_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_100_consigne_activation_cons_can_axe_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_100_consigne_activation_cons_can_axe_x_is_in_range(uint8_t value);

/**
 * Pack message id_110_Diag.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_wheelchair_id_110_diag_pack(
    uint8_t *dst_p,
    const struct can_wheelchair_id_110_diag_t *src_p,
    size_t size);

/**
 * Unpack message id_110_Diag.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_wheelchair_id_110_diag_unpack(
    struct can_wheelchair_id_110_diag_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from id_110_Diag.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can_wheelchair_id_110_diag_init(struct can_wheelchair_id_110_diag_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_110_diag_position_joystick_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_position_joystick_y_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_position_joystick_y_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_110_diag_position_joystick_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_position_joystick_x_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_position_joystick_x_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_110_diag_id100_trame_valide_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_id100_trame_valide_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_id100_trame_valide_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_110_diag_cons_x_robot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_cons_x_robot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_cons_x_robot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_110_diag_cons_y_robot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_cons_y_robot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_cons_y_robot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_110_diag_mesure_tension_24_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_mesure_tension_24_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_mesure_tension_24_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_110_diag_mesure_tension_12_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_mesure_tension_12_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_mesure_tension_12_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_110_diag_mesure_tension_19_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_mesure_tension_19_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_mesure_tension_19_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_110_diag_desactivation_robot_timeout_can_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_110_diag_desactivation_robot_timeout_can_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_110_diag_desactivation_robot_timeout_can_is_in_range(uint8_t value);

/**
 * Pack message id_111_Diag.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_wheelchair_id_111_diag_pack(
    uint8_t *dst_p,
    const struct can_wheelchair_id_111_diag_t *src_p,
    size_t size);

/**
 * Unpack message id_111_Diag.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_wheelchair_id_111_diag_unpack(
    struct can_wheelchair_id_111_diag_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from id_111_Diag.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can_wheelchair_id_111_diag_init(struct can_wheelchair_id_111_diag_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_111_diag_vitesse_roue_gauche_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_vitesse_roue_gauche_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_vitesse_roue_gauche_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can_wheelchair_id_111_diag_vitesse_roue_droite_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_vitesse_roue_droite_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_vitesse_roue_droite_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_111_diag_direction_roue_droite_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_direction_roue_droite_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_direction_roue_droite_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_111_diag_direction_roue_gauche_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_direction_roue_gauche_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_direction_roue_gauche_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_111_diag_dft_maxi_capteur_joystick_axe_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_dft_maxi_capteur_joystick_axe_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_dft_maxi_capteur_joystick_axe_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_111_diag_dft_mini_capteur_joystick_axe_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_dft_mini_capteur_joystick_axe_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_dft_mini_capteur_joystick_axe_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_111_diag_dft_maxi_capteur_joystick_axe_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_dft_maxi_capteur_joystick_axe_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_dft_maxi_capteur_joystick_axe_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_wheelchair_id_111_diag_dft_mini_capteur_joystick_axe_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_wheelchair_id_111_diag_dft_mini_capteur_joystick_axe_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_wheelchair_id_111_diag_dft_mini_capteur_joystick_axe_x_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
